---
description:
globs:
alwaysApply: false
---
# Database Interactions in Materialize_1C

## Database Connections
The project connects to two main databases:

1. **Primary Database** (materialize1c_development)
   - Used for storing application data
   - Stores metadata about 1C tables, fields, and materialized views
   - Full read/write access

2. **Source 1C Database** (keramir_samara)
   - Contains the actual 1C data
   - Read-only access
   - Used as the source for analysis and materialized views creation

## Connection Switching
When working with the source 1C database:

```ruby
# Connect to the source 1C database
ActiveRecord::Base.establish_connection(:source_1c)

# Execute queries
result = ActiveRecord::Base.connection.select_all("SELECT * FROM your_table")

# Always switch back to the primary database when done
ActiveRecord::Base.establish_connection(:primary)
```

## Database Migration Commands
The following commands can be used to manage and inspect database migrations.

To see the status of all migrations:
```bash
bin/rails db:migrate:status
```

To see the status of migrations for a specific database:
```bash
bin/rails db:migrate:status:primary
bin/rails db:migrate:status:solid_cable
bin/rails db:migrate:status:solid_cache
bin/rails db:migrate:status:solid_queue
```

Other useful migration commands (replace `[database_name]` with `primary`, `solid_cable`, etc. or omit for general commands):
```bash
bin/rails db:migrate                                # Migrate the database
bin/rails db:migrate:[database_name]              # Migrate specific database
bin/rails db:migrate:up VERSION=x                 # Run the "up" for a given migration
bin/rails db:migrate:down VERSION=x               # Run the "down" for a given migration
bin/rails db:migrate:redo STEP=x                  # Roll back and re-migrate
bin/rails db:migrate:reset                        # Reset database using migrations
```
For a full list of migration commands, run:
```bash
bin/rails db:migrate --help
```

## Database Structure Analysis
Use the `DbStructureAnalyzer` service to analyze the structure of the 1C database:

```ruby
analyzer = DbStructureAnalyzer.new
analyzer.analyze_and_save
```

## Table Mappings
Use the `TableMapping` model to work with mappings between SQL tables and 1C entities:

```ruby
# Find mapping by SQL table name
mapping = TableMapping.by_sql_table("_reference12345")

# Find mapping by 1C table name
mapping = TableMapping.by_one_c_table("Справочник.Товары")
```

## Important Database Tables
- `db_metadata_table_infos` - Stores metadata about tables in the 1C database
- `table_mappings` - Maps SQL table names to 1C entity names
- `enum_mappings` - Maps SQL enum values to 1C enum names

## 1C Database Structure Conventions
1C tables typically follow these naming patterns:
- `_Reference`: Reference tables (справочники)
- `_Document`: Document tables (документы)
- `_Enum`: Enumeration tables (перечисления)
- `_Accumulation`: Accumulation register tables (регистры накопления)
- `_InfoReg`: Information register tables (регистры сведений)

Common fields in 1C tables:
- `_IDRRef`: Primary key reference
- `_Code`: Entity code 
- `_Description`: Entity name/description
- `_Date`: Document date
- `_Posted`: Document posting flag
- `_Period`: Period for registers
