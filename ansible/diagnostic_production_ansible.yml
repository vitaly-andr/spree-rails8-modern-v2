---
- name: Diagnostic Check for Production Server
  hosts: production
  become: yes
  gather_facts: yes
  
  vars_files:
    - group_vars/all.yml
  
  tasks:
    - name: Display server information
      debug:
        msg: |
          üîç DIAGNOSTIC CHECK FOR PRODUCTION SERVER
          =========================================
          Host: {{ inventory_hostname }}
          IP: {{ ansible_host }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Architecture: {{ ansible_architecture }}
          Kernel: {{ ansible_kernel }}
          Memory: {{ ansible_memtotal_mb }} MB
          CPU Cores: {{ ansible_processor_cores }}

    - name: Check current firewall status
      shell: ufw status
      register: ufw_status
      ignore_errors: yes

    - name: Display firewall status
      debug:
        msg: |
          üî• FIREWALL STATUS:
          {{ ufw_status.stdout if ufw_status.stdout else 'UFW not installed or not running' }}

    - name: Check running services
      shell: systemctl list-units --type=service --state=running | grep -E "(ssh|nginx|docker|apache|mysql|postgres|fail2ban)"
      register: running_services
      ignore_errors: yes

    - name: Display running services
      debug:
        msg: |
          üöÄ RUNNING SERVICES:
          {{ running_services.stdout if running_services.stdout else 'No relevant services found' }}

    - name: Check listening ports
      shell: netstat -tlnp | grep LISTEN
      register: listening_ports
      ignore_errors: yes

    - name: Display listening ports
      debug:
        msg: |
          üåê LISTENING PORTS:
          {{ listening_ports.stdout if listening_ports.stdout else 'No listening ports found' }}

    - name: Check Docker status
      shell: docker ps -a
      register: docker_status
      ignore_errors: yes

    - name: Display Docker status
      debug:
        msg: |
          üê≥ DOCKER STATUS:
          {{ docker_status.stdout if docker_status.stdout else 'Docker not running or not installed' }}

    - name: Check disk usage
      shell: df -h
      register: disk_usage

    - name: Display disk usage
      debug:
        msg: |
          üíæ DISK USAGE:
          {{ disk_usage.stdout }}

    - name: Check memory usage
      shell: free -h
      register: memory_usage

    - name: Display memory usage
      debug:
        msg: |
          üß† MEMORY USAGE:
          {{ memory_usage.stdout }}

    - name: Check web server configuration
      shell: find /etc -name "*.conf" -exec grep -l "server_name\|DocumentRoot" {} \; 2>/dev/null | head -10
      register: web_configs
      ignore_errors: yes

    - name: Display web server configs
      debug:
        msg: |
          üåç WEB SERVER CONFIGS:
          {{ web_configs.stdout if web_configs.stdout else 'No web configs found' }}

    - name: Check Apache virtual hosts
      shell: apache2ctl -S 2>/dev/null || apachectl -S 2>/dev/null || echo "Apache not found"
      register: apache_vhosts
      ignore_errors: yes

    - name: Display Apache virtual hosts
      debug:
        msg: |
          üï∑Ô∏è APACHE VIRTUAL HOSTS:
          {{ apache_vhosts.stdout if apache_vhosts.stdout else 'Apache not found' }}

    - name: Check Nginx sites
      shell: ls /etc/nginx/sites-enabled/ 2>/dev/null || echo "Nginx sites not found"
      register: nginx_sites
      ignore_errors: yes

    - name: Display Nginx sites
      debug:
        msg: |
          üöÄ NGINX SITES:
          {{ nginx_sites.stdout if nginx_sites.stdout else 'Nginx sites not found' }}

    - name: Check SSL certificates
      shell: find /etc/letsencrypt/live/ -maxdepth 1 -type d 2>/dev/null | tail -n +2 | sed 's/.*\///' || echo "No Let's Encrypt certificates found"
      register: ssl_certs
      ignore_errors: yes

    - name: Display SSL certificates
      debug:
        msg: |
          üîê SSL CERTIFICATES:
          {{ ssl_certs.stdout if ssl_certs.stdout else 'No SSL certificates found' }}

    - name: Check domain DNS records
      shell: "for domain in $(find /etc/letsencrypt/live/ -maxdepth 1 -type d 2>/dev/null | tail -n +2 | sed 's/.*\///'); do echo \"Domain: $domain\"; done"
      register: domain_list
      ignore_errors: yes

    - name: Display domain list
      debug:
        msg: |
          üåê CONFIGURED DOMAINS:
          {{ domain_list.stdout if domain_list.stdout else 'No domains found' }}

    - name: Check SSH configuration
      shell: grep -E "^(Port|PermitRootLogin|PasswordAuthentication|PubkeyAuthentication)" /etc/ssh/sshd_config
      register: ssh_config
      ignore_errors: yes

    - name: Display SSH configuration
      debug:
        msg: |
          üîë SSH CONFIGURATION:
          {{ ssh_config.stdout if ssh_config.stdout else 'SSH config not accessible' }}

    - name: Check current user and permissions
      shell: whoami && groups && sudo -l
      register: user_info
      ignore_errors: yes

    - name: Display user information
      debug:
        msg: |
          üë§ USER INFORMATION:
          {{ user_info.stdout if user_info.stdout else 'User info not accessible' }}

    - name: Check network interfaces
      shell: ip addr show | grep -E "inet.*95\.217\.223\.50"
      register: network_interfaces
      ignore_errors: yes

    - name: Display network interfaces
      debug:
        msg: |
          üåç NETWORK INTERFACES:
          {{ network_interfaces.stdout if network_interfaces.stdout else 'Network interfaces not found' }}

    - name: Check if server is actively used
      shell: "echo 'Last login:' && last | head -5 && echo 'Active connections:' && netstat -an | grep ESTABLISHED | wc -l"
      register: server_usage
      ignore_errors: yes

    - name: Display server usage info
      debug:
        msg: |
          üìä SERVER USAGE INFO:
          {{ server_usage.stdout if server_usage.stdout else 'Usage info not accessible' }}

    - name: Final diagnostic summary
      debug:
        msg: |
          ‚úÖ PRODUCTION SERVER DIAGNOSTIC COMPLETE
          =======================================
          
          üìã NEXT STEPS:
          1. Review the information above
          2. Check if this server is actively used
          3. Verify domain configurations
          4. Decide if staging can be deployed here
          
          üîß RECOMMENDATIONS:
          - If server is unused, perfect for staging
          - If domains are configured, check for conflicts
          - Consider resource availability for staging app
          
          üéØ POTENTIAL STAGING DEPLOYMENT:
          - Check port availability (80, 443, 3000)
          - Verify SSL certificate conflicts
          - Assess resource requirements
