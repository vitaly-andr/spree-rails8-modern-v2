---
- name: Diagnostic Check for Staging Server
  hosts: staging
  become: yes
  gather_facts: yes
  
  vars_files:
    - group_vars/all.yml
    - group_vars/staging.yml
  
  tasks:
    - name: Display server information
      debug:
        msg: |
          üîç DIAGNOSTIC CHECK FOR STAGING SERVER
          ======================================
          Host: {{ inventory_hostname }}
          IP: {{ ansible_host }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Architecture: {{ ansible_architecture }}
          Kernel: {{ ansible_kernel }}
          Memory: {{ ansible_memtotal_mb }} MB
          CPU Cores: {{ ansible_processor_cores }}

    - name: Check current firewall status
      shell: ufw status
      register: ufw_status
      ignore_errors: yes

    - name: Display firewall status
      debug:
        msg: |
          üî• FIREWALL STATUS:
          {{ ufw_status.stdout if ufw_status.stdout else 'UFW not installed or not running' }}

    - name: Check running services
      shell: systemctl list-units --type=service --state=running | grep -E "(ssh|nginx|docker|v2ray|fail2ban)"
      register: running_services
      ignore_errors: yes

    - name: Display running services
      debug:
        msg: |
          üöÄ RUNNING SERVICES:
          {{ running_services.stdout if running_services.stdout else 'No relevant services found' }}

    - name: Check listening ports
      shell: netstat -tlnp | grep -E ":(22|80|443|3000|49784|49785|49786|1087)"
      register: listening_ports
      ignore_errors: yes

    - name: Display listening ports
      debug:
        msg: |
          üåê LISTENING PORTS:
          {{ listening_ports.stdout if listening_ports.stdout else 'No relevant ports found' }}

    - name: Check Docker status
      shell: docker ps -a
      register: docker_status
      ignore_errors: yes

    - name: Display Docker status
      debug:
        msg: |
          üê≥ DOCKER STATUS:
          {{ docker_status.stdout if docker_status.stdout else 'Docker not running or not installed' }}

    - name: Check disk usage
      shell: df -h
      register: disk_usage

    - name: Display disk usage
      debug:
        msg: |
          üíæ DISK USAGE:
          {{ disk_usage.stdout }}

    - name: Check memory usage
      shell: free -h
      register: memory_usage

    - name: Display memory usage
      debug:
        msg: |
          üß† MEMORY USAGE:
          {{ memory_usage.stdout }}

    - name: Check V2Ray configuration
      stat:
        path: /usr/local/bin/v2ray
      register: v2ray_binary

    - name: Check V2Ray config file
      stat:
        path: /usr/local/etc/v2ray/config.json
      register: v2ray_config

    - name: Display V2Ray status
      debug:
        msg: |
          üì° V2RAY STATUS:
          Binary: {{ 'Found' if v2ray_binary.stat.exists else 'Not found' }}
          Config: {{ 'Found' if v2ray_config.stat.exists else 'Not found' }}

    - name: Check SSH configuration
      shell: grep -E "^(Port|PermitRootLogin|PasswordAuthentication|PubkeyAuthentication)" /etc/ssh/sshd_config
      register: ssh_config
      ignore_errors: yes

    - name: Display SSH configuration
      debug:
        msg: |
          üîë SSH CONFIGURATION:
          {{ ssh_config.stdout if ssh_config.stdout else 'SSH config not accessible' }}

    - name: Check current user and permissions
      shell: whoami && groups && sudo -l
      register: user_info
      ignore_errors: yes

    - name: Display user information
      debug:
        msg: |
          üë§ USER INFORMATION:
          {{ user_info.stdout if user_info.stdout else 'User info not accessible' }}

    - name: Check network interfaces
      shell: ip addr show | grep -E "inet.*(46\.62\.141\.255|2a01:4f9:c011:8f82)"
      register: network_interfaces
      ignore_errors: yes

    - name: Display network interfaces
      debug:
        msg: |
          üåç NETWORK INTERFACES:
          {{ network_interfaces.stdout if network_interfaces.stdout else 'Network interfaces not found' }}

    - name: Final diagnostic summary
      debug:
        msg: |
          ‚úÖ DIAGNOSTIC COMPLETE
          =====================
          
          üìã NEXT STEPS:
          1. Review the information above
          2. Ensure SSH port 22 is accessible
          3. Check if V2Ray ports conflict with staging app
          4. Run: make setup (after reviewing conflicts)
          
          ‚ö†Ô∏è  POTENTIAL CONFLICTS:
          - V2Ray uses ports: 49784, 49785, 49786, 1087
          - Staging app needs: 22 (SSH), 80 (HTTP), 443 (HTTPS), 3000 (App)
          
          üîß RECOMMENDATIONS:
          - Keep V2Ray running (VPN service)
          - Configure UFW to allow both V2Ray and staging ports
          - Use different ports if conflicts arise
